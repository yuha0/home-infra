- name: Load kernel modules
  modprobe:
    name: '{{ item }}'
    state: present
  with_items: '{{ kernel_modules }}'
  tags:
  - kernel_modules

- name: persistent kernel modules
  template:
    src: modules.conf.j2
    dest: /etc/modules-load.d/k0s.conf
  tags:
  - kernel_modules

- name: check kubectl
  command: kubectl -h
  register: kubectl_status
  changed_when: kubectl_status.rc != 0
  ignore_errors: yes
  tags:
  - kubectl

- name: Get kubectl checksum
  get_url:
    url: https://dl.k8s.io/{{ kubectl_version }}/bin/linux/{{ server_arch }}/kubectl.sha256
    dest: /tmp/kubectl.sha256
  when: kubectl_status.rc != 0
  tags:
  - kubectl

- name: Get checksum content
  slurp:
    src: /tmp/kubectl.sha256
  register: kubectl_checksum
  when: kubectl_status.rc != 0
  tags:
  - kubectl

- name: Install kubectl
  get_url:
    url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/{{ server_arch }}/kubectl"
    checksum: "sha256:{{ kubectl_checksum['content'] | b64decode }}"
    dest: /usr/local/bin/kubectl
    mode: 0755
  when: kubectl_status.rc != 0
  tags:
  - kubectl

- name: check crictl
  command: crictl -h
  register: crictl_status
  changed_when: crictl_status.rc != 0
  ignore_errors: yes
  tags:
  - crictl

- name: Download crictl
  get_url:
    url: https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-linux-{{ server_arch }}.tar.gz
    checksum: "sha256:https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-linux-{{ server_arch }}.tar.gz.sha256"
    dest: /tmp/crictl-{{ crictl_version }}-linux-{{ server_arch }}.tar.gz
  when: crictl_status.rc != 0
  tags:
  - crictl

- name: Install crictl
  unarchive:
    src: /tmp/crictl-{{ crictl_version }}-linux-{{ server_arch }}.tar.gz
    dest: /usr/local/bin/
    remote_src: yes
  when: crictl_status.rc != 0
  tags:
  - crictl

- name: crictl config
  copy:
    src: crictl.yaml
    dest: /etc/crictl.yaml
    mode: 0644
  tags:
  - crictl

- name: Download k0s binary
  vars:
    k0s_checksum: "{{ amd64_checksum if ansible_architecture == 'x86_64' else arm64_checksum }}"
  get_url:
    url: https://github.com/k0sproject/k0s/releases/download/{{ k0s_version }}/k0s-{{ k0s_version }}-{{ server_arch }}
    checksum: "sha256:{{ k0s_checksum }}"
    dest: /usr/local/bin/k0s
    mode: 0755
  register: k0s_binary
  tags:
  - k0s_binary

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
  - "{{ k0s_config_dir }}"
  - "{{ k0s_data_dir }}"
  - "{{ k0s_libexec_dir }}"
  tags:
  - k0s_dir
    
- name: Generate config
  register: k0s_config
  template:
    src: k0s.yaml.j2
    dest: "{{ k0s_config_dir }}/k0s.yaml"
    mode: 0644
  when: "'control_plane' in group_names"
  tags:
  - k0s_config

- name: "{{ inventory_hostname }} | Install controller"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  register: k0s_first_controller_install
  failed_when: k0s_first_controller_install.rc != 0 and 'Init already exists' not in k0s_first_controller_install.stderr
  changed_when: k0s_first_controller_install.rc == 0
  command: k0s install controller -c {{ k0s_config_dir }}/k0s.yaml --enable-worker --kubelet-extra-args='--register-with-taints=node-role.kubernetes.io/master=:NoSchedule' --disable-components {{ disable_components }}
  tags:
  - first_controller
  - control_plane

- name: "{{ inventory_hostname }} | Set ETCD_UNSUPPORTED_ARCH=arm64 in k0scontroller system service"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  lineinfile:
    dest: /etc/systemd/system/k0scontroller.service
    insertafter: '\[Service\]'
    line: 'Environment="ETCD_UNSUPPORTED_ARCH=arm64"'
  when: "ansible_architecture != 'x86_64'"
  tags:
  - first_controller
  - control_plane

- name: "{{ inventory_hostname }} | Restart controller after config change"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  systemd:
    name: k0scontroller
    enabled: yes
    state: restarted
    daemon_reload: yes
  when: (k0s_config is defined and k0s_config.changed) or k0s_binary.changed
  tags:
  - first_controller
  - control_plane

- name: "{{ inventory_hostname }} | Verify that the controller is started"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  systemd:
    name: k0scontroller
    enabled: yes
    state: started
    daemon_reload: yes
  tags:
  - first_controller
  - control_plane

- name: "{{ inventory_hostname }} | Wait for k8s apiserver"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  wait_for:
    host: localhost
    port: 6443
    timeout: 180
  tags:
  - first_controller
  - control_plane

- name: "{{ inventory_hostname }} | Make a copy of admin kubeconfig file"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  copy:
    src: "{{ k0s_data_dir }}/pki/admin.conf"
    dest: "{{ k0s_data_dir }}/pki/admin.conf.cp"
    remote_src: yes
    mode: 0600
  tags:
  - kubeconfig

- name: "{{ inventory_hostname }} | Fix hostname in the admin kubeconfig file copy"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  replace:
    path: "{{ k0s_data_dir }}/pki/admin.conf.cp"
    regexp: 'localhost'
    replace: "{{ ansible_host }}"
  tags:
  - kubeconfig
    
- name: "{{ inventory_hostname }} | Copy the admin kubeconfig file copy to local directory {{ inventory_dir }}/artifacts"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  fetch:
    src: "{{ k0s_data_dir }}/pki/admin.conf.cp"
    dest: "{{ inventory_dir }}/artifacts/admin.conf"
    flat: yes
  tags:
  - kubeconfig

- name: "{{ inventory_hostname }} | Delete the temporary admin kubeconfig file copy"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  file:
    path: "{{ k0s_data_dir }}/pki/admin.conf.cp"
    state: absent
  tags:
  - kubeconfig

- name: "{{ inventory_hostname }} | Generate join token for other controllers -- this token is only valid for 10 minutes"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  register: controller_join_token
  command: k0s token create --role=controller --expiry=10m -c {{ k0s_config_dir }}/k0s.yaml
  retries: 6
  delay: 10
  until: controller_join_token is not failed
  tags:
  - controller_join
  - control_plane

- name: Copy controller join token to other controllers
  template:
    src: controller_join_token.j2
    dest: "{{ k0s_config_dir }}/controller-token"
    mode: 0600
  when: inventory_hostname in groups['control_plane'][1:]
  tags:
  - controller_join
  - control_plane

- name: Install controllers
  register: k0s_controller_install
  command: k0s install controller -c {{ k0s_config_dir }}/k0s.yaml --token-file {{ k0s_config_dir }}/controller-token --enable-worker --kubelet-extra-args='--register-with-taints=node-role.kubernetes.io/master=:NoSchedule' --disable-components {{ disable_components }}
  failed_when: k0s_controller_install.rc != 0 and 'Init already exists' not in k0s_controller_install.stderr
  changed_when: k0s_controller_install.rc == 0
  when: inventory_hostname in groups['control_plane'][1:]
  tags:
  - controller_join
  - control_plane

- name: Set ETCD_UNSUPPORTED_ARCH=arm64 in k0scontroller system service
  lineinfile:
    dest: /etc/systemd/system/k0scontroller.service
    insertafter: '\[Service\]'
    line: 'Environment="ETCD_UNSUPPORTED_ARCH=arm64"'
  when: inventory_hostname in groups['control_plane'][1:] and ansible_architecture != 'x86_64'
  tags:
  - controller_join
  - control_plane

- name: Restart controller after config change
  systemd:
    name: k0scontroller
    enabled: yes
    state: restarted
    daemon_reload: yes
  when: inventory_hostname in groups['control_plane'][1:] and ((k0s_config is defined and k0s_config.changed) or k0s_binary.changed)
  tags:
  - controller_join
  - control_plane

- name: Verify that the controller is started
  systemd:
    name: k0scontroller
    enabled: yes
    state: started
    daemon_reload: yes
  when: inventory_hostname in groups['control_plane'][1:]
  tags:
  - controller_join
  - control_plane

- name: Wait for k8s apiserver
  wait_for:
    host: localhost
    port: 6443
    timeout: 180
  when: inventory_hostname in groups['control_plane'][1:]
  tags:
  - controller_join
  - control_plane

- name: Add role labels to control plane nodes
  command: kubectl --kubeconfig {{ k0s_data_dir }}/pki/admin.conf label node {{ inventory_hostname }} {{ item }}
  register: control_plane_labels
  with_items:
  - node-role.kubernetes.io/master=
  - node-role.kubernetes.io/control-plane=
  when: inventory_hostname in groups['control_plane']
  failed_when: control_plane_labels.rc != 0 and 'already has a value' not in control_plane_labels.stderr
  changed_when: control_plane_labels.rc == 0
  retries: 6
  delay: 10
  until: control_plane_labels is not failed
  tags:
  - control_plane
  - node_label

- name: "{{ inventory_hostname }} | Generate join token for worker nodes -- this token is only valid for 10 minutes"
  run_once: yes
  delegate_to: "{{ groups['control_plane'][0] }}"
  register: worker_join_token
  command: k0s token create --role=worker --expiry=10m -c {{ k0s_config_dir }}/k0s.yaml
  tags:
  - worker_join
  - worker

- name: Copy worker join token to worker nodes
  template:
    src: worker_join_token.j2
    dest: "{{ k0s_config_dir }}/worker-token"
    mode: 0600
  when: inventory_hostname in groups['worker']
  tags:
  - worker_join
  - worker

- name: "Install worker"
  register: k0s_worker_install
  failed_when: k0s_worker_install.rc != 0 and 'Init already exists' not in k0s_worker_install.stderr
  changed_when: k0s_worker_install.rc == 0
  command: k0s install worker --token-file {{ k0s_config_dir }}/worker-token
  when: inventory_hostname in groups['worker']
  tags:
  - worker_join
  - worker

- name: Restart controller after config change
  systemd:
    name: k0sworker
    enabled: yes
    state: restarted
    daemon_reload: yes
  when: inventory_hostname in groups['worker'] and ((k0s_config is defined and k0s_config.changed) or k0s_binary.changed)
  tags:
  - worker_join
  - worker

- name: Verify that the controller is started
  systemd:
    name: k0sworker
    enabled: yes
    state: started
    daemon_reload: yes
  when: inventory_hostname in groups['worker']
  tags:
  - worker_join
  - worker

- name: Add role labels to worker nodes
  delegate_to: "{{ groups['control_plane'][0] }}"
  command: kubectl --kubeconfig {{ k0s_data_dir }}/pki/admin.conf label node {{ inventory_hostname }} {{ item }}
  when: inventory_hostname in groups['worker']
  register: worker_labels
  with_items:
  - node-role.kubernetes.io/node=
  failed_when: worker_labels.rc != 0 and 'already has a value' not in worker_labels.stderr
  changed_when: worker_labels.rc == 0
  retries: 6
  delay: 10
  until: worker_labels is not failed
  tags:
  - worker
  - node_label
