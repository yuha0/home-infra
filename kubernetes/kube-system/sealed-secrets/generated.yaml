---
# Source: crds/sealedsecret-crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sealedsecrets.bitnami.com
spec:
  group: bitnami.com
  names:
    kind: SealedSecret
    listKind: SealedSecretList
    plural: sealedsecrets
    singular: sealedsecret
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            x-kubernetes-preserve-unknown-fields: true

---
# Source: sealed-secrets/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
      app.kubernetes.io/instance: sealed-secrets-controller
  ingress:
    - ports:
      - port: 8080
---
# Source: sealed-secrets/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
---
# Source: sealed-secrets/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
rules:
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: sealed-secrets/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets-controller
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: sealed-secrets-controller
    namespace: kube-system
---
# Source: sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sealed-secrets-controller-key-admin
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
rules:
  - apiGroups:
      - ""
    resourceNames:
      - sealed-secrets-key
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - list
---
# Source: sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sealed-secrets-controller-service-proxier
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
  - apiGroups:
      - ""
    resourceNames:
      - 'http:sealed-secrets-controller:'
      - 'http:sealed-secrets-controller:http'
      - sealed-secrets-controller
    resources:
      - services/proxy
    verbs:
      - create
      - get
---
# Source: sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sealed-secrets-controller-key-admin
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-controller-key-admin
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: sealed-secrets-controller
    namespace: kube-system
---
# Source: sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sealed-secrets-controller-service-proxier
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-controller-service-proxier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
# Source: sealed-secrets/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/instance: sealed-secrets-controller
---
# Source: sealed-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.4
    app.kubernetes.io/instance: sealed-secrets-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.3
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
      app.kubernetes.io/instance: sealed-secrets-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets
        app.kubernetes.io/instance: sealed-secrets-controller
    spec:
      securityContext:
        fsGroup: 65534
      serviceAccountName: sealed-secrets-controller
      containers:
        - name: controller
          command:
            - controller
          args:
            - --update-status
            - --key-renew-period
            - "2160h30m"
            - --key-prefix
            - "sealed-secrets-key"
          image: quay.io/bitnami/sealed-secrets-controller:v0.17.4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          resources:
            limits: {}
            requests: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: tmp
          emptyDir: {}
