---
# Source: mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: unifi-mongodb
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: unifi-mongodb
---
# Source: mongodb/templates/replicaset/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unifi-mongodb-scripts
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  setup.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh

    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    echo "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"

    if [[ "$MY_POD_NAME" = "unifi-mongodb-0" ]]; then
        echo "Pod name matches initial primary pod name, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    else
        echo "Pod name doesn't match initial primary pod name, configuring node as a secondary"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
        export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
        export MONGODB_ROOT_PASSWORD=""
        export MONGODB_EXTRA_USERNAMES=""
        export MONGODB_EXTRA_DATABASES=""
        export MONGODB_EXTRA_PASSWORDS=""
        export MONGODB_ROOT_PASSWORD_FILE=""
        export MONGODB_EXTRA_USERNAMES_FILE=""
        export MONGODB_EXTRA_DATABASES_FILE=""
        export MONGODB_EXTRA_PASSWORDS_FILE=""
    fi

    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
  setup-hidden.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh

    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    echo "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"
    echo "Configuring node as a hidden node"
    export MONGODB_REPLICA_SET_MODE="hidden"
    export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    export MONGODB_ROOT_PASSWORD=""
    export MONGODB_EXTRA_USERNAMES=""
    export MONGODB_EXTRA_DATABASES=""
    export MONGODB_EXTRA_PASSWORDS=""
    export MONGODB_ROOT_PASSWORD_FILE=""
    export MONGODB_EXTRA_USERNAMES_FILE=""
    export MONGODB_EXTRA_DATABASES_FILE=""
    export MONGODB_EXTRA_PASSWORDS_FILE=""
    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
---
# Source: mongodb/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: unifi-mongodb
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - watch
    - update
---
# Source: mongodb/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: unifi-mongodb
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  name: unifi-mongodb
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: unifi-mongodb
    namespace: unifi
---
# Source: mongodb/templates/arbiter/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: unifi-mongodb-arbiter-headless
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/component: arbiter
---
# Source: mongodb/templates/extra-list.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: mongodb
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
  name: unifi-mongodb
  namespace: unifi
spec:
  ports:
  - name: mongodb
    port: 27017
    protocol: TCP
    targetPort: mongodb
  selector:
    app.kubernetes.io/component: mongodb
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/name: mongodb
    primary: "true"
  type: ClusterIP
---
# Source: mongodb/templates/replicaset/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: unifi-mongodb-headless
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/component: mongodb
---
# Source: mongodb/templates/arbiter/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: unifi-mongodb-arbiter
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  serviceName: unifi-mongodb-arbiter-headless
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: unifi
      app.kubernetes.io/component: arbiter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-11.0.6
        app.kubernetes.io/instance: unifi
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: arbiter
    spec:
      
      serviceAccountName: unifi-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: unifi
                    app.kubernetes.io/component: arbiter
                namespaces:
                  - "unifi"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      nodeSelector:
        kubernetes.io/arch: amd64
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        sysctls: []
      initContainers:
      containers:
        - name: mongodb-arbiter
          image: docker.io/bitnami/mongodb:4.4.12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "unifi-mongodb-arbiter-headless"
            - name: MONGODB_REPLICA_SET_MODE
              value: "arbiter"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: "unifi-mongodb-0.unifi-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            tcpSocket:
              port: mongodb
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: mongodb
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
---
# Source: mongodb/templates/replicaset/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: unifi-mongodb
  namespace: unifi
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.0.6
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  serviceName: unifi-mongodb-headless
  podManagementPolicy: OrderedReady
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: unifi
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-11.0.6
        app.kubernetes.io/instance: unifi
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: unifi-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: unifi
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "unifi"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      nodeSelector:
        kubernetes.io/arch: amd64
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        sysctls: []
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: K8S_SERVICE_NAME
              value: "unifi-mongodb-headless"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: "unifi-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_EXTRA_USERNAMES
              value: "unifi"
            - name: MONGODB_EXTRA_DATABASES
              value: "unifi"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            
        - env:
          - name: LABEL_SELECTOR
            value: app.kubernetes.io/component=mongodb,app.kubernetes.io/instance=unifi
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: DEBUG
            value: "true"
          image: korenlev/k8s-mongo-labeler-sidecar@sha256:185a650d3b7f05ef15ca4f770cad7dc1e0d156c5b5b7b24d86a726990ec73d46
          imagePullPolicy: Always
          name: mongo-labeler
      volumes:
        - name: scripts
          configMap:
            name: unifi-mongodb-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
        storageClassName: nfs-client
