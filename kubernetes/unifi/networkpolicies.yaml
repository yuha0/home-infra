---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: controller
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: unifi
  ingress:
  # internal ingress controller
  - fromEndpoints:
    - matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        io.kubernetes.pod.namespace: ingress-nginx-internal
  # everything within namespace
  - fromEndpoints:
    - {}
  # unifi gears in the main vlan
  - fromCIDRSet:
    - cidr: 10.100.0.0/20
  # nodelocaldns
  - fromCIDRSet:
    - cidr: 169.254.25.10/32
  egress:
  # unifi gears in the main vlan
  - toCIDRSet:
    - cidr: 10.100.0.0/20
  # check firmware updates, device EOL dates ... etc
  - toFQDNs:
    - matchPattern: "*.ubnt.com"
    toPorts:
    - ports:
      - port: "443"
  # multicast
  - toFQDNs:
    - matchName: "igmp.mcast.net"
  # mongodb in the same namespace
  - toEndpoints:
    - matchLabels:
        app.kubernetes.io/name: mongodb
  # DNS
  - toEndpoints:
    - matchLabels:
        io.kubernetes.pod.namespace: kube-system
        k8s-app: kube-dns
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
  # nodelocaldns
  - toCIDRSet:
    - cidr: 169.254.25.10/32
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
---

apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: mongodb
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: mongodb
  ingress:
  # unifi controller
  - fromEndpoints:
    - matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: unifi
  # MongoDB pods themselves
  - fromEndpoints:
    - matchLabels:
        app.kubernetes.io/name: mongodb

---

apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: backup
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/instance: rclone
  # should not need to be accessed by anything
  ingress:
  - {}
  egress:
  # DNS
  - toEndpoints:
    - matchLabels:
        io.kubernetes.pod.namespace: kube-system
        k8s-app: kube-dns
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
  # nodelocaldns
  - toCIDRSet:
    - cidr: 169.254.25.10/32
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
  - toFQDNs:
    - matchPattern: "*.backblazeb2.com"

---

apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: unpoller
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: unpoller
  ingress:
  # unpoller needs to be scraped by prometheus
  - fromEndpoints:
    - matchLabels:
        prometheus: prom-unifi
        io.kubernetes.pod.namespace: monitoring
  egress:
  # DNS
  - toEndpoints:
      - matchLabels:
          io.kubernetes.pod.namespace: kube-system
          k8s-app: kube-dns
    toPorts:
      - ports:
          - port: "53"
            protocol: UDP
        rules:
          dns:
            - matchPattern: "*"
  # nodelocaldns
  - toCIDRSet:
    - cidr: 169.254.25.10/32
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
  # push logs to loki
  - toEndpoints:
    - matchLabels:
        io.kubernetes.pod.namespace: loki
  # pull metrics from controller
  - toEndpoints:
    - matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: unifi
